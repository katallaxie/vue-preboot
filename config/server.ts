import * as Path from 'path'
import * as MFS from 'memory-fs'
import * as Webpack from 'webpack'
import * as WebpackHotMiddleware from 'webpack-hot-middleware'
import * as webpackMerge from 'webpack-merge'

import { devConfig, defaultConfig, ssrConfig, commonConfig } from './configs'

export default function setupDevServer(app, cb) {
  let bundle
  let template

  const newDevConfig = devConfig()

  // modify client config to work with hot middleware
  newDevConfig.entry.app = ['webpack-hot-middleware/client', ...newDevConfig.entry.app]
  newDevConfig.output.filename = '[name].js'

  // dev middleware
  const clientCompiler = Webpack(webpackMerge(
    {},
    defaultConfig(),
    commonConfig(),
    newDevConfig
  ))
  const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
    publicPath: devConfig().output.publicPath,
    stats: {
      colors: true,
      chunks: false
    }
  })
  app.use(devMiddleware)

  clientCompiler.plugin('done', () => {
    const fs = clientCompiler.outputFileSystem
    const filePath = Path.join(devConfig().output.path, 'index.html')
    if (fs.existsSync(filePath)) {
      template = fs.readFileSync(filePath, 'utf-8')
      if (bundle) {
        cb(bundle, template)
      }
    }
  })

  // hot middleware
  app.use(WebpackHotMiddleware(clientCompiler))

  // watch and update server renderer
  const serverCompiler = Webpack(webpackMerge(
    {},
    defaultConfig(),
    ssrConfig(),
    commonConfig()
  ))
  const mfs = new MFS()
  serverCompiler.outputFileSystem = mfs
  serverCompiler.watch({}, (err, stats) => {
    if (err) {
      throw err
    }
    stats = stats.toJson()
    stats.errors.forEach(er => console.error(er))
    stats.warnings.forEach(er => console.warn(er))

    // read bundle generated by vue-ssr-webpack-plugin
    const bundlePath = Path.join(ssrConfig().output.path, 'vue-ssr-bundle.json')
    bundle = JSON.parse(mfs.readFileSync(bundlePath, 'utf-8'))

    if (template) {
      cb(bundle, template)
    }
  })
}
