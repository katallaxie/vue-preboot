import * as Path from 'path'
import * as MFS from 'memory-fs'
import * as Webpack from 'webpack'
import * as WebpackHotMiddleware from 'webpack-hot-middleware'

// configs
import Configs from './configs'
const { ssrConfig, devConfig } = Configs

export default function setupDevServer(app, cb) {
  let bundle
  let clientManifest
  let template

  let resolve
  const resolved = false
  const readyPromise = new Promise((r) => {
    resolve = r
  })
  const ready = (...args) => {
    if (!resolved) {
      resolve()
    }
    cb(...args)
  }

  // modify client config to work with hot middleware
  devConfig.entry.app = ['webpack-hot-middleware/client?reload=true', ...devConfig.entry.app]
  devConfig.output.filename = '[name].js'

  // dev middleware
  const clientCompiler = Webpack(devConfig)
  const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
    publicPath: devConfig.output.publicPath,
    noInfo: true,
    stats: {
      colors: true,
      chunks: false
    },
    serverSideRender: true
  })
  app.use(devMiddleware)

  clientCompiler.plugin('done', () => {
    const fs = devMiddleware.fileSystem
    const readFile = (file) => fs.readFileSync(Path.join(devConfig.output.path, file), 'utf-8')
    clientManifest = JSON.parse(readFile('vue-ssr-client-manifest.json'))
    template = readFile('index.html')
    if (bundle) {
      ready(bundle, template, {
        clientManifest
      })
    }
  })

  // hot middleware
  app.use(WebpackHotMiddleware(clientCompiler))

  // watch and update server renderer
  const serverCompiler = Webpack(ssrConfig)
  const mfs = new MFS()
  serverCompiler.outputFileSystem = mfs
  serverCompiler.watch({}, (err, stats) => {
    if (err) {
      throw err
    }
    stats = stats.toJson()
    stats.errors.forEach((er) => console.error(er))
    stats.warnings.forEach((er) => console.warn(er))
    const readFile = (file) => mfs.readFileSync(Path.join(ssrConfig.output.path, file), 'utf-8')
    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile('vue-ssr-server-bundle.json'))
    if (clientManifest && template) {
      cb(bundle, template, { clientManifest })
    }
  })

  return readyPromise
}
